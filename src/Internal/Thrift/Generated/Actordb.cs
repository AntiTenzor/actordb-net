/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


public partial class Actordb
{
  public interface IAsync
  {
    Task<string> protocolVersionAsync(CancellationToken cancellationToken);

    Task<LoginResult> loginAsync(string username, byte[] password, CancellationToken cancellationToken);

    Task<byte[]> saltAsync(CancellationToken cancellationToken);

    Task<Result> exec_configAsync(string sql, CancellationToken cancellationToken);

    Task<Result> exec_schemaAsync(string sql, CancellationToken cancellationToken);

    Task<Result> exec_singleAsync(string actorname, string actortype, string sql, List<string> flags, CancellationToken cancellationToken);

    Task<Result> exec_single_paramAsync(string actorname, string actortype, string sql, List<string> flags, List<List<Val>> bindingvals, CancellationToken cancellationToken);

    Task<Result> exec_multiAsync(List<string> actors, string actortype, string sql, List<string> flags, CancellationToken cancellationToken);

    Task<Result> exec_allAsync(string actortype, string sql, List<string> flags, CancellationToken cancellationToken);

    Task<Result> exec_sqlAsync(string sql, CancellationToken cancellationToken);

    Task<Result> exec_sql_paramAsync(string sql, List<List<Val>> bindingvals, CancellationToken cancellationToken);

    Task<List<string>> actor_typesAsync(CancellationToken cancellationToken);

    Task<List<string>> actor_tablesAsync(string actor_type, CancellationToken cancellationToken);

    Task<Dictionary<string, string>> actor_columnsAsync(string actor_type, string actor_table, CancellationToken cancellationToken);

    Task<long> uniqidAsync(CancellationToken cancellationToken);

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)    {
    }
    public async Task<string> protocolVersionAsync(CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("protocolVersion", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new protocolVersionArgs();
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new protocolVersionResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "protocolVersion failed: unknown result");
    }

    public async Task<LoginResult> loginAsync(string username, byte[] password, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("login", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new loginArgs();
      args.Username = username;
      args.Password = password;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new loginResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.ire)
      {
        throw result.Ire;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "login failed: unknown result");
    }

    public async Task<byte[]> saltAsync(CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("salt", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new saltArgs();
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new saltResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "salt failed: unknown result");
    }

    public async Task<Result> exec_configAsync(string sql, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_config", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new exec_configArgs();
      args.Sql = sql;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new exec_configResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.ire)
      {
        throw result.Ire;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_config failed: unknown result");
    }

    public async Task<Result> exec_schemaAsync(string sql, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_schema", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new exec_schemaArgs();
      args.Sql = sql;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new exec_schemaResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.ire)
      {
        throw result.Ire;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_schema failed: unknown result");
    }

    public async Task<Result> exec_singleAsync(string actorname, string actortype, string sql, List<string> flags, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_single", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new exec_singleArgs();
      args.Actorname = actorname;
      args.Actortype = actortype;
      args.Sql = sql;
      args.Flags = flags;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new exec_singleResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.ire)
      {
        throw result.Ire;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_single failed: unknown result");
    }

    public async Task<Result> exec_single_paramAsync(string actorname, string actortype, string sql, List<string> flags, List<List<Val>> bindingvals, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_single_param", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new exec_single_paramArgs();
      args.Actorname = actorname;
      args.Actortype = actortype;
      args.Sql = sql;
      args.Flags = flags;
      args.Bindingvals = bindingvals;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new exec_single_paramResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.ire)
      {
        throw result.Ire;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_single_param failed: unknown result");
    }

    public async Task<Result> exec_multiAsync(List<string> actors, string actortype, string sql, List<string> flags, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_multi", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new exec_multiArgs();
      args.Actors = actors;
      args.Actortype = actortype;
      args.Sql = sql;
      args.Flags = flags;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new exec_multiResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.ire)
      {
        throw result.Ire;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_multi failed: unknown result");
    }

    public async Task<Result> exec_allAsync(string actortype, string sql, List<string> flags, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_all", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new exec_allArgs();
      args.Actortype = actortype;
      args.Sql = sql;
      args.Flags = flags;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new exec_allResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.ire)
      {
        throw result.Ire;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_all failed: unknown result");
    }

    public async Task<Result> exec_sqlAsync(string sql, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new exec_sqlArgs();
      args.Sql = sql;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new exec_sqlResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.ire)
      {
        throw result.Ire;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_sql failed: unknown result");
    }

    public async Task<Result> exec_sql_paramAsync(string sql, List<List<Val>> bindingvals, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_sql_param", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new exec_sql_paramArgs();
      args.Sql = sql;
      args.Bindingvals = bindingvals;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new exec_sql_paramResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.ire)
      {
        throw result.Ire;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_sql_param failed: unknown result");
    }

    public async Task<List<string>> actor_typesAsync(CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("actor_types", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new actor_typesArgs();
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new actor_typesResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.ire)
      {
        throw result.Ire;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "actor_types failed: unknown result");
    }

    public async Task<List<string>> actor_tablesAsync(string actor_type, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("actor_tables", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new actor_tablesArgs();
      args.Actor_type = actor_type;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new actor_tablesResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.ire)
      {
        throw result.Ire;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "actor_tables failed: unknown result");
    }

    public async Task<Dictionary<string, string>> actor_columnsAsync(string actor_type, string actor_table, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("actor_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new actor_columnsArgs();
      args.Actor_type = actor_type;
      args.Actor_table = actor_table;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new actor_columnsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.ire)
      {
        throw result.Ire;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "actor_columns failed: unknown result");
    }

    public async Task<long> uniqidAsync(CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("uniqid", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new uniqidArgs();
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new uniqidResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.ire)
      {
        throw result.Ire;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "uniqid failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private IAsync _iAsync;

    public AsyncProcessor(IAsync iAsync)
    {
      if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

      _iAsync = iAsync;
      processMap_["protocolVersion"] = protocolVersion_ProcessAsync;
      processMap_["login"] = login_ProcessAsync;
      processMap_["salt"] = salt_ProcessAsync;
      processMap_["exec_config"] = exec_config_ProcessAsync;
      processMap_["exec_schema"] = exec_schema_ProcessAsync;
      processMap_["exec_single"] = exec_single_ProcessAsync;
      processMap_["exec_single_param"] = exec_single_param_ProcessAsync;
      processMap_["exec_multi"] = exec_multi_ProcessAsync;
      processMap_["exec_all"] = exec_all_ProcessAsync;
      processMap_["exec_sql"] = exec_sql_ProcessAsync;
      processMap_["exec_sql_param"] = exec_sql_param_ProcessAsync;
      processMap_["actor_types"] = actor_types_ProcessAsync;
      processMap_["actor_tables"] = actor_tables_ProcessAsync;
      processMap_["actor_columns"] = actor_columns_ProcessAsync;
      processMap_["uniqid"] = uniqid_ProcessAsync;
    }

    protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async Task protocolVersion_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new protocolVersionArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new protocolVersionResult();
      try
      {
        result.Success = await _iAsync.protocolVersionAsync(cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("protocolVersion", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("protocolVersion", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task login_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new loginArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new loginResult();
      try
      {
        try
        {
          result.Success = await _iAsync.loginAsync(args.Username, args.Password, cancellationToken);
        }
        catch (InvalidRequestException ire)
        {
          result.Ire = ire;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("login", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("login", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task salt_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new saltArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new saltResult();
      try
      {
        result.Success = await _iAsync.saltAsync(cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("salt", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("salt", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task exec_config_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new exec_configArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new exec_configResult();
      try
      {
        try
        {
          result.Success = await _iAsync.exec_configAsync(args.Sql, cancellationToken);
        }
        catch (InvalidRequestException ire)
        {
          result.Ire = ire;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_config", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_config", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task exec_schema_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new exec_schemaArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new exec_schemaResult();
      try
      {
        try
        {
          result.Success = await _iAsync.exec_schemaAsync(args.Sql, cancellationToken);
        }
        catch (InvalidRequestException ire)
        {
          result.Ire = ire;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_schema", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_schema", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task exec_single_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new exec_singleArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new exec_singleResult();
      try
      {
        try
        {
          result.Success = await _iAsync.exec_singleAsync(args.Actorname, args.Actortype, args.Sql, args.Flags, cancellationToken);
        }
        catch (InvalidRequestException ire)
        {
          result.Ire = ire;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_single", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_single", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task exec_single_param_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new exec_single_paramArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new exec_single_paramResult();
      try
      {
        try
        {
          result.Success = await _iAsync.exec_single_paramAsync(args.Actorname, args.Actortype, args.Sql, args.Flags, args.Bindingvals, cancellationToken);
        }
        catch (InvalidRequestException ire)
        {
          result.Ire = ire;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_single_param", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_single_param", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task exec_multi_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new exec_multiArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new exec_multiResult();
      try
      {
        try
        {
          result.Success = await _iAsync.exec_multiAsync(args.Actors, args.Actortype, args.Sql, args.Flags, cancellationToken);
        }
        catch (InvalidRequestException ire)
        {
          result.Ire = ire;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_multi", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_multi", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task exec_all_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new exec_allArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new exec_allResult();
      try
      {
        try
        {
          result.Success = await _iAsync.exec_allAsync(args.Actortype, args.Sql, args.Flags, cancellationToken);
        }
        catch (InvalidRequestException ire)
        {
          result.Ire = ire;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_all", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_all", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task exec_sql_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new exec_sqlArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new exec_sqlResult();
      try
      {
        try
        {
          result.Success = await _iAsync.exec_sqlAsync(args.Sql, cancellationToken);
        }
        catch (InvalidRequestException ire)
        {
          result.Ire = ire;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task exec_sql_param_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new exec_sql_paramArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new exec_sql_paramResult();
      try
      {
        try
        {
          result.Success = await _iAsync.exec_sql_paramAsync(args.Sql, args.Bindingvals, cancellationToken);
        }
        catch (InvalidRequestException ire)
        {
          result.Ire = ire;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql_param", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql_param", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task actor_types_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new actor_typesArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new actor_typesResult();
      try
      {
        try
        {
          result.Success = await _iAsync.actor_typesAsync(cancellationToken);
        }
        catch (InvalidRequestException ire)
        {
          result.Ire = ire;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("actor_types", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("actor_types", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task actor_tables_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new actor_tablesArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new actor_tablesResult();
      try
      {
        try
        {
          result.Success = await _iAsync.actor_tablesAsync(args.Actor_type, cancellationToken);
        }
        catch (InvalidRequestException ire)
        {
          result.Ire = ire;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("actor_tables", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("actor_tables", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task actor_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new actor_columnsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new actor_columnsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.actor_columnsAsync(args.Actor_type, args.Actor_table, cancellationToken);
        }
        catch (InvalidRequestException ire)
        {
          result.Ire = ire;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("actor_columns", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("actor_columns", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task uniqid_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new uniqidArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new uniqidResult();
      try
      {
        try
        {
          result.Success = await _iAsync.uniqidAsync(cancellationToken);
        }
        catch (InvalidRequestException ire)
        {
          result.Ire = ire;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("uniqid", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("uniqid", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }


  public partial class protocolVersionArgs : TBase
  {

    public protocolVersionArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("protocolVersion_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("protocolVersion_args(");
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class protocolVersionResult : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
    }

    public protocolVersionResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("protocolVersion_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("protocolVersion_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class loginArgs : TBase
  {

    public string Username { get; set; }

    public byte[] Password { get; set; }

    public loginArgs()
    {
    }

    public loginArgs(string username, byte[] password) : this()
    {
      this.Username = username;
      this.Password = password;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_username = false;
        bool isset_password = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Username = await iprot.ReadStringAsync(cancellationToken);
                isset_username = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Password = await iprot.ReadBinaryAsync(cancellationToken);
                isset_password = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_username)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_password)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("login_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "username";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Username, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBinaryAsync(Password, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("login_args(");
      sb.Append(", Username: ");
      sb.Append(Username);
      sb.Append(", Password: ");
      sb.Append(Password);
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class loginResult : TBase
  {
    private LoginResult _success;
    private InvalidRequestException _ire;

    public LoginResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public InvalidRequestException Ire
    {
      get
      {
        return _ire;
      }
      set
      {
        __isset.ire = true;
        this._ire = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool ire;
    }

    public loginResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new LoginResult();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Ire = new InvalidRequestException();
                await Ire.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("login_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ire)
        {
          if (Ire != null)
          {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ire.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("login_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ire != null && __isset.ire)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class saltArgs : TBase
  {

    public saltArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("salt_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("salt_args(");
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class saltResult : TBase
  {
    private byte[] _success;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
    }

    public saltResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String)
              {
                Success = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("salt_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBinaryAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("salt_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_configArgs : TBase
  {

    public string Sql { get; set; }

    public exec_configArgs()
    {
    }

    public exec_configArgs(string sql) : this()
    {
      this.Sql = sql;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_sql = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Sql = await iprot.ReadStringAsync(cancellationToken);
                isset_sql = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_sql)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_config_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "sql";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Sql, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_config_args(");
      sb.Append(", Sql: ");
      sb.Append(Sql);
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_configResult : TBase
  {
    private Result _success;
    private InvalidRequestException _ire;

    public Result Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public InvalidRequestException Ire
    {
      get
      {
        return _ire;
      }
      set
      {
        __isset.ire = true;
        this._ire = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool ire;
    }

    public exec_configResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Result();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Ire = new InvalidRequestException();
                await Ire.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_config_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ire)
        {
          if (Ire != null)
          {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ire.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_config_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ire != null && __isset.ire)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_schemaArgs : TBase
  {

    public string Sql { get; set; }

    public exec_schemaArgs()
    {
    }

    public exec_schemaArgs(string sql) : this()
    {
      this.Sql = sql;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_sql = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Sql = await iprot.ReadStringAsync(cancellationToken);
                isset_sql = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_sql)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_schema_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "sql";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Sql, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_schema_args(");
      sb.Append(", Sql: ");
      sb.Append(Sql);
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_schemaResult : TBase
  {
    private Result _success;
    private InvalidRequestException _ire;

    public Result Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public InvalidRequestException Ire
    {
      get
      {
        return _ire;
      }
      set
      {
        __isset.ire = true;
        this._ire = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool ire;
    }

    public exec_schemaResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Result();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Ire = new InvalidRequestException();
                await Ire.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_schema_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ire)
        {
          if (Ire != null)
          {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ire.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_schema_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ire != null && __isset.ire)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_singleArgs : TBase
  {
    private List<string> _flags;

    public string Actorname { get; set; }

    public string Actortype { get; set; }

    public string Sql { get; set; }

    public List<string> Flags
    {
      get
      {
        return _flags;
      }
      set
      {
        __isset.flags = true;
        this._flags = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool flags;
    }

    public exec_singleArgs()
    {
      this._flags = new List<string>();
      this.__isset.flags = true;
    }

    public exec_singleArgs(string actorname, string actortype, string sql) : this()
    {
      this.Actorname = actorname;
      this.Actortype = actortype;
      this.Sql = sql;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_actorname = false;
        bool isset_actortype = false;
        bool isset_sql = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Actorname = await iprot.ReadStringAsync(cancellationToken);
                isset_actorname = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Actortype = await iprot.ReadStringAsync(cancellationToken);
                isset_actortype = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Sql = await iprot.ReadStringAsync(cancellationToken);
                isset_sql = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  Flags = new List<string>();
                  TList _list21 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i22 = 0; _i22 < _list21.Count; ++_i22)
                  {
                    string _elem23;
                    _elem23 = await iprot.ReadStringAsync(cancellationToken);
                    Flags.Add(_elem23);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_actorname)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_actortype)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_sql)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_single_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "actorname";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Actorname, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "actortype";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Actortype, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "sql";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Sql, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Flags != null && __isset.flags)
        {
          field.Name = "flags";
          field.Type = TType.List;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Flags.Count), cancellationToken);
            foreach (string _iter24 in Flags)
            {
              await oprot.WriteStringAsync(_iter24, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_single_args(");
      sb.Append(", Actorname: ");
      sb.Append(Actorname);
      sb.Append(", Actortype: ");
      sb.Append(Actortype);
      sb.Append(", Sql: ");
      sb.Append(Sql);
      if (Flags != null && __isset.flags)
      {
        sb.Append(", Flags: ");
        sb.Append(Flags);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_singleResult : TBase
  {
    private Result _success;
    private InvalidRequestException _ire;

    public Result Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public InvalidRequestException Ire
    {
      get
      {
        return _ire;
      }
      set
      {
        __isset.ire = true;
        this._ire = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool ire;
    }

    public exec_singleResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Result();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Ire = new InvalidRequestException();
                await Ire.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_single_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ire)
        {
          if (Ire != null)
          {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ire.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_single_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ire != null && __isset.ire)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_single_paramArgs : TBase
  {
    private List<string> _flags;
    private List<List<Val>> _bindingvals;

    public string Actorname { get; set; }

    public string Actortype { get; set; }

    public string Sql { get; set; }

    public List<string> Flags
    {
      get
      {
        return _flags;
      }
      set
      {
        __isset.flags = true;
        this._flags = value;
      }
    }

    public List<List<Val>> Bindingvals
    {
      get
      {
        return _bindingvals;
      }
      set
      {
        __isset.bindingvals = true;
        this._bindingvals = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool flags;
      public bool bindingvals;
    }

    public exec_single_paramArgs()
    {
      this._flags = new List<string>();
      this.__isset.flags = true;
      this._bindingvals = new List<List<Val>>();
      this.__isset.bindingvals = true;
    }

    public exec_single_paramArgs(string actorname, string actortype, string sql) : this()
    {
      this.Actorname = actorname;
      this.Actortype = actortype;
      this.Sql = sql;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_actorname = false;
        bool isset_actortype = false;
        bool isset_sql = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Actorname = await iprot.ReadStringAsync(cancellationToken);
                isset_actorname = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Actortype = await iprot.ReadStringAsync(cancellationToken);
                isset_actortype = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Sql = await iprot.ReadStringAsync(cancellationToken);
                isset_sql = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  Flags = new List<string>();
                  TList _list25 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i26 = 0; _i26 < _list25.Count; ++_i26)
                  {
                    string _elem27;
                    _elem27 = await iprot.ReadStringAsync(cancellationToken);
                    Flags.Add(_elem27);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  Bindingvals = new List<List<Val>>();
                  TList _list28 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i29 = 0; _i29 < _list28.Count; ++_i29)
                  {
                    List<Val> _elem30;
                    {
                      _elem30 = new List<Val>();
                      TList _list31 = await iprot.ReadListBeginAsync(cancellationToken);
                      for(int _i32 = 0; _i32 < _list31.Count; ++_i32)
                      {
                        Val _elem33;
                        _elem33 = new Val();
                        await _elem33.ReadAsync(iprot, cancellationToken);
                        _elem30.Add(_elem33);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    Bindingvals.Add(_elem30);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_actorname)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_actortype)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_sql)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_single_param_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "actorname";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Actorname, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "actortype";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Actortype, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "sql";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Sql, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Flags != null && __isset.flags)
        {
          field.Name = "flags";
          field.Type = TType.List;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Flags.Count), cancellationToken);
            foreach (string _iter34 in Flags)
            {
              await oprot.WriteStringAsync(_iter34, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Bindingvals != null && __isset.bindingvals)
        {
          field.Name = "bindingvals";
          field.Type = TType.List;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.List, Bindingvals.Count), cancellationToken);
            foreach (List<Val> _iter35 in Bindingvals)
            {
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, _iter35.Count), cancellationToken);
                foreach (Val _iter36 in _iter35)
                {
                  await _iter36.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_single_param_args(");
      sb.Append(", Actorname: ");
      sb.Append(Actorname);
      sb.Append(", Actortype: ");
      sb.Append(Actortype);
      sb.Append(", Sql: ");
      sb.Append(Sql);
      if (Flags != null && __isset.flags)
      {
        sb.Append(", Flags: ");
        sb.Append(Flags);
      }
      if (Bindingvals != null && __isset.bindingvals)
      {
        sb.Append(", Bindingvals: ");
        sb.Append(Bindingvals);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_single_paramResult : TBase
  {
    private Result _success;
    private InvalidRequestException _ire;

    public Result Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public InvalidRequestException Ire
    {
      get
      {
        return _ire;
      }
      set
      {
        __isset.ire = true;
        this._ire = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool ire;
    }

    public exec_single_paramResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Result();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Ire = new InvalidRequestException();
                await Ire.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_single_param_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ire)
        {
          if (Ire != null)
          {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ire.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_single_param_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ire != null && __isset.ire)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_multiArgs : TBase
  {
    private List<string> _flags;

    public List<string> Actors { get; set; }

    public string Actortype { get; set; }

    public string Sql { get; set; }

    public List<string> Flags
    {
      get
      {
        return _flags;
      }
      set
      {
        __isset.flags = true;
        this._flags = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool flags;
    }

    public exec_multiArgs()
    {
      this._flags = new List<string>();
      this.__isset.flags = true;
    }

    public exec_multiArgs(List<string> actors, string actortype, string sql) : this()
    {
      this.Actors = actors;
      this.Actortype = actortype;
      this.Sql = sql;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_actors = false;
        bool isset_actortype = false;
        bool isset_sql = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  Actors = new List<string>();
                  TList _list37 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i38 = 0; _i38 < _list37.Count; ++_i38)
                  {
                    string _elem39;
                    _elem39 = await iprot.ReadStringAsync(cancellationToken);
                    Actors.Add(_elem39);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_actors = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Actortype = await iprot.ReadStringAsync(cancellationToken);
                isset_actortype = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Sql = await iprot.ReadStringAsync(cancellationToken);
                isset_sql = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  Flags = new List<string>();
                  TList _list40 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i41 = 0; _i41 < _list40.Count; ++_i41)
                  {
                    string _elem42;
                    _elem42 = await iprot.ReadStringAsync(cancellationToken);
                    Flags.Add(_elem42);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_actors)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_actortype)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_sql)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_multi_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "actors";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Actors.Count), cancellationToken);
          foreach (string _iter43 in Actors)
          {
            await oprot.WriteStringAsync(_iter43, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "actortype";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Actortype, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "sql";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Sql, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Flags != null && __isset.flags)
        {
          field.Name = "flags";
          field.Type = TType.List;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Flags.Count), cancellationToken);
            foreach (string _iter44 in Flags)
            {
              await oprot.WriteStringAsync(_iter44, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_multi_args(");
      sb.Append(", Actors: ");
      sb.Append(Actors);
      sb.Append(", Actortype: ");
      sb.Append(Actortype);
      sb.Append(", Sql: ");
      sb.Append(Sql);
      if (Flags != null && __isset.flags)
      {
        sb.Append(", Flags: ");
        sb.Append(Flags);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_multiResult : TBase
  {
    private Result _success;
    private InvalidRequestException _ire;

    public Result Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public InvalidRequestException Ire
    {
      get
      {
        return _ire;
      }
      set
      {
        __isset.ire = true;
        this._ire = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool ire;
    }

    public exec_multiResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Result();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Ire = new InvalidRequestException();
                await Ire.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_multi_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ire)
        {
          if (Ire != null)
          {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ire.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_multi_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ire != null && __isset.ire)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_allArgs : TBase
  {
    private List<string> _flags;

    public string Actortype { get; set; }

    public string Sql { get; set; }

    public List<string> Flags
    {
      get
      {
        return _flags;
      }
      set
      {
        __isset.flags = true;
        this._flags = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool flags;
    }

    public exec_allArgs()
    {
      this._flags = new List<string>();
      this.__isset.flags = true;
    }

    public exec_allArgs(string actortype, string sql) : this()
    {
      this.Actortype = actortype;
      this.Sql = sql;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_actortype = false;
        bool isset_sql = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Actortype = await iprot.ReadStringAsync(cancellationToken);
                isset_actortype = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Sql = await iprot.ReadStringAsync(cancellationToken);
                isset_sql = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  Flags = new List<string>();
                  TList _list45 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i46 = 0; _i46 < _list45.Count; ++_i46)
                  {
                    string _elem47;
                    _elem47 = await iprot.ReadStringAsync(cancellationToken);
                    Flags.Add(_elem47);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_actortype)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_sql)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_all_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "actortype";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Actortype, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "sql";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Sql, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Flags != null && __isset.flags)
        {
          field.Name = "flags";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Flags.Count), cancellationToken);
            foreach (string _iter48 in Flags)
            {
              await oprot.WriteStringAsync(_iter48, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_all_args(");
      sb.Append(", Actortype: ");
      sb.Append(Actortype);
      sb.Append(", Sql: ");
      sb.Append(Sql);
      if (Flags != null && __isset.flags)
      {
        sb.Append(", Flags: ");
        sb.Append(Flags);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_allResult : TBase
  {
    private Result _success;
    private InvalidRequestException _ire;

    public Result Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public InvalidRequestException Ire
    {
      get
      {
        return _ire;
      }
      set
      {
        __isset.ire = true;
        this._ire = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool ire;
    }

    public exec_allResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Result();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Ire = new InvalidRequestException();
                await Ire.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_all_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ire)
        {
          if (Ire != null)
          {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ire.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_all_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ire != null && __isset.ire)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_sqlArgs : TBase
  {

    public string Sql { get; set; }

    public exec_sqlArgs()
    {
    }

    public exec_sqlArgs(string sql) : this()
    {
      this.Sql = sql;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_sql = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Sql = await iprot.ReadStringAsync(cancellationToken);
                isset_sql = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_sql)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_sql_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "sql";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Sql, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_sql_args(");
      sb.Append(", Sql: ");
      sb.Append(Sql);
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_sqlResult : TBase
  {
    private Result _success;
    private InvalidRequestException _ire;

    public Result Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public InvalidRequestException Ire
    {
      get
      {
        return _ire;
      }
      set
      {
        __isset.ire = true;
        this._ire = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool ire;
    }

    public exec_sqlResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Result();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Ire = new InvalidRequestException();
                await Ire.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_sql_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ire)
        {
          if (Ire != null)
          {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ire.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_sql_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ire != null && __isset.ire)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_sql_paramArgs : TBase
  {
    private List<List<Val>> _bindingvals;

    public string Sql { get; set; }

    public List<List<Val>> Bindingvals
    {
      get
      {
        return _bindingvals;
      }
      set
      {
        __isset.bindingvals = true;
        this._bindingvals = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool bindingvals;
    }

    public exec_sql_paramArgs()
    {
      this._bindingvals = new List<List<Val>>();
      this.__isset.bindingvals = true;
    }

    public exec_sql_paramArgs(string sql) : this()
    {
      this.Sql = sql;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_sql = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Sql = await iprot.ReadStringAsync(cancellationToken);
                isset_sql = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  Bindingvals = new List<List<Val>>();
                  TList _list49 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i50 = 0; _i50 < _list49.Count; ++_i50)
                  {
                    List<Val> _elem51;
                    {
                      _elem51 = new List<Val>();
                      TList _list52 = await iprot.ReadListBeginAsync(cancellationToken);
                      for(int _i53 = 0; _i53 < _list52.Count; ++_i53)
                      {
                        Val _elem54;
                        _elem54 = new Val();
                        await _elem54.ReadAsync(iprot, cancellationToken);
                        _elem51.Add(_elem54);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    Bindingvals.Add(_elem51);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_sql)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_sql_param_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "sql";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Sql, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Bindingvals != null && __isset.bindingvals)
        {
          field.Name = "bindingvals";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.List, Bindingvals.Count), cancellationToken);
            foreach (List<Val> _iter55 in Bindingvals)
            {
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, _iter55.Count), cancellationToken);
                foreach (Val _iter56 in _iter55)
                {
                  await _iter56.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_sql_param_args(");
      sb.Append(", Sql: ");
      sb.Append(Sql);
      if (Bindingvals != null && __isset.bindingvals)
      {
        sb.Append(", Bindingvals: ");
        sb.Append(Bindingvals);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class exec_sql_paramResult : TBase
  {
    private Result _success;
    private InvalidRequestException _ire;

    public Result Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public InvalidRequestException Ire
    {
      get
      {
        return _ire;
      }
      set
      {
        __isset.ire = true;
        this._ire = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool ire;
    }

    public exec_sql_paramResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new Result();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Ire = new InvalidRequestException();
                await Ire.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("exec_sql_param_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ire)
        {
          if (Ire != null)
          {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ire.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("exec_sql_param_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Ire != null && __isset.ire)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class actor_typesArgs : TBase
  {

    public actor_typesArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("actor_types_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("actor_types_args(");
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class actor_typesResult : TBase
  {
    private List<string> _success;
    private InvalidRequestException _ire;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public InvalidRequestException Ire
    {
      get
      {
        return _ire;
      }
      set
      {
        __isset.ire = true;
        this._ire = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool ire;
    }

    public actor_typesResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<string>();
                  TList _list57 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i58 = 0; _i58 < _list57.Count; ++_i58)
                  {
                    string _elem59;
                    _elem59 = await iprot.ReadStringAsync(cancellationToken);
                    Success.Add(_elem59);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Ire = new InvalidRequestException();
                await Ire.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("actor_types_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
              foreach (string _iter60 in Success)
              {
                await oprot.WriteStringAsync(_iter60, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ire)
        {
          if (Ire != null)
          {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ire.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("actor_types_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Ire != null && __isset.ire)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class actor_tablesArgs : TBase
  {

    public string Actor_type { get; set; }

    public actor_tablesArgs()
    {
    }

    public actor_tablesArgs(string actor_type) : this()
    {
      this.Actor_type = actor_type;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_actor_type = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Actor_type = await iprot.ReadStringAsync(cancellationToken);
                isset_actor_type = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_actor_type)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("actor_tables_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "actor_type";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Actor_type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("actor_tables_args(");
      sb.Append(", Actor_type: ");
      sb.Append(Actor_type);
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class actor_tablesResult : TBase
  {
    private List<string> _success;
    private InvalidRequestException _ire;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public InvalidRequestException Ire
    {
      get
      {
        return _ire;
      }
      set
      {
        __isset.ire = true;
        this._ire = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool ire;
    }

    public actor_tablesResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<string>();
                  TList _list61 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i62 = 0; _i62 < _list61.Count; ++_i62)
                  {
                    string _elem63;
                    _elem63 = await iprot.ReadStringAsync(cancellationToken);
                    Success.Add(_elem63);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Ire = new InvalidRequestException();
                await Ire.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("actor_tables_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
              foreach (string _iter64 in Success)
              {
                await oprot.WriteStringAsync(_iter64, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ire)
        {
          if (Ire != null)
          {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ire.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("actor_tables_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Ire != null && __isset.ire)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class actor_columnsArgs : TBase
  {

    public string Actor_type { get; set; }

    public string Actor_table { get; set; }

    public actor_columnsArgs()
    {
    }

    public actor_columnsArgs(string actor_type, string actor_table) : this()
    {
      this.Actor_type = actor_type;
      this.Actor_table = actor_table;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_actor_type = false;
        bool isset_actor_table = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Actor_type = await iprot.ReadStringAsync(cancellationToken);
                isset_actor_type = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Actor_table = await iprot.ReadStringAsync(cancellationToken);
                isset_actor_table = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_actor_type)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_actor_table)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("actor_columns_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "actor_type";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Actor_type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "actor_table";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Actor_table, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("actor_columns_args(");
      sb.Append(", Actor_type: ");
      sb.Append(Actor_type);
      sb.Append(", Actor_table: ");
      sb.Append(Actor_table);
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class actor_columnsResult : TBase
  {
    private Dictionary<string, string> _success;
    private InvalidRequestException _ire;

    public Dictionary<string, string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public InvalidRequestException Ire
    {
      get
      {
        return _ire;
      }
      set
      {
        __isset.ire = true;
        this._ire = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool ire;
    }

    public actor_columnsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map)
              {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map65 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i66 = 0; _i66 < _map65.Count; ++_i66)
                  {
                    string _key67;
                    string _val68;
                    _key67 = await iprot.ReadStringAsync(cancellationToken);
                    _val68 = await iprot.ReadStringAsync(cancellationToken);
                    Success[_key67] = _val68;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Ire = new InvalidRequestException();
                await Ire.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("actor_columns_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Success.Count), cancellationToken);
              foreach (string _iter69 in Success.Keys)
              {
                await oprot.WriteStringAsync(_iter69, cancellationToken);
                await oprot.WriteStringAsync(Success[_iter69], cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ire)
        {
          if (Ire != null)
          {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ire.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("actor_columns_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Ire != null && __isset.ire)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class uniqidArgs : TBase
  {

    public uniqidArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("uniqid_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("uniqid_args(");
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class uniqidResult : TBase
  {
    private long _success;
    private InvalidRequestException _ire;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public InvalidRequestException Ire
    {
      get
      {
        return _ire;
      }
      set
      {
        __isset.ire = true;
        this._ire = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool ire;
    }

    public uniqidResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64)
              {
                Success = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Ire = new InvalidRequestException();
                await Ire.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("uniqid_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.ire)
        {
          if (Ire != null)
          {
            field.Name = "Ire";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ire.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("uniqid_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Ire != null && __isset.ire)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ire: ");
        sb.Append(Ire== null ? "<null>" : Ire.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
