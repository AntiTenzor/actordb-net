/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class Result : TBase
{
  private ReadResult _rdRes;
  private WriteResult _wrRes;

  public ReadResult RdRes
  {
    get
    {
      return _rdRes;
    }
    set
    {
      __isset.rdRes = true;
      this._rdRes = value;
    }
  }

  public WriteResult WrRes
  {
    get
    {
      return _wrRes;
    }
    set
    {
      __isset.wrRes = true;
      this._wrRes = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool rdRes;
    public bool wrRes;
  }

  public Result()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              RdRes = new ReadResult();
              await RdRes.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              WrRes = new WriteResult();
              await WrRes.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Result");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (RdRes != null && __isset.rdRes)
      {
        field.Name = "rdRes";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await RdRes.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (WrRes != null && __isset.wrRes)
      {
        field.Name = "wrRes";
        field.Type = TType.Struct;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await WrRes.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Result(");
    bool __first = true;
    if (RdRes != null && __isset.rdRes)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("RdRes: ");
      sb.Append(RdRes== null ? "<null>" : RdRes.ToString());
    }
    if (WrRes != null && __isset.wrRes)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("WrRes: ");
      sb.Append(WrRes== null ? "<null>" : WrRes.ToString());
    }
    sb.Append(")");
    return sb.ToString();
  }
}

